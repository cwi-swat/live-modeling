static {
  class Task {
     actions: Action*
     order: OrderedPair*
  }

  class Subsystem {
    ssa: Action*
  }

  class Action {}

  class OrderedPair {
    action: Action
    succeeds: Action
  }
}

runtime {
  class Queue  {
    subsystem: Subsystem
    actions: QueuedAction*

    invariants {
      // Each queue corresponds to a subsystem (and contains actions only of this subsystem)
      forall qa: actions | qa.item in subsystem.ssa       
    }
  }

  class QueuedAction {
    item: Action
    index: int
  }

  class Runtime  {
    request: Action*
    queues: Queue*
    task: Task
 
    invariants {
      // Current request is a subset of the current task
      request in task.actions 
    
      // There is a queue for each subsystem whose action appears in the task
      forall s: Subsystem | some (s.ssa & task.actions) => (exists q: queues | q.subsystem = s)
    	
      // Each queued action of the task is removed from the request
      forall q: queues | no (q.actions.item & request)

      // An action cannot be queued if it succeeds an action that hasn't been queued yet (= that is still in the request)
      forall o: task.order | 
        o.succeeds in request => o.action in request 

      // An action cannot be queued if it succeeds an action that hasn't been executed yet (= that is still in a queue)
      // unless these actions belong to one subsystem
      forall o: task.order | 
        (exists q: Queue | o.succeeds in q.actions.item &&
          not (o.action in q.subsystem.ssa) ) =>
          not (exists q: Queue | o.action in q.actions.item)      


      // If actions from one subsystem are ordered, then they should be queued in the corresponding order
      forall o: task.order |
        (exists q: Queue | o.succeeds in q.actions.item && o.action in q.actions.item)
          =>
        (forall qa1: queues.actions, qa2: queues.actions | 
                (qa1.item = o.succeeds) && (qa2.item = o.action) => qa1.index > qa2.index)                    
    } 
  }
}

migration {
  // If we add new actions to the task, put them into request
  new[Runtime.task.actions] -- old[Runtime.task.actions] in new[Runtime.request] 
}

