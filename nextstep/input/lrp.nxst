static {
	class Machine {
		states: State*
		initState: State
		variables: Variable*
		events: Event*				
		transitions: Transition*
	}
	
	class State {
		nested: Machine*
		onentry: Action*		// another way to model inheritance: have separate relations for subtypes
		running: Action*
		onexit: Action*		
	}

	class Variable {}
	
	class Action {
		scope : Variable*
	}
	
	class Event {			// event is an action that returns boolean
		action: Action
	}
	
	class SpawnAction {		// some actions are meant to start execution of a nested machine
		spaction: Action
		spmachine: Machine
	}
	
	class Transition {
		from : State
		to : State
	}
	
	class NormalTransition {
		ntrans: Transition	// this is how we model a subset/subclass of Transition
		onevent: Event
	}
	
	class EpsilonTransition {
		etrans: Transition	// subclass of Transition
	}
	
	class TimeoutTransition {
		ttrans: Transition 	// subclass of Transition
		maxtime: int		// how to model that the maxtime can be a reference to a variable?
	} 
	
	class WildCardTransition {
		wtrans: Transition 	// subclass of Transition (or subclass of NormalTransition)
		wfrom : State*		// overriding of a field
		wonevent: Event
	}
	
}


//Note: the runtime structure does not correspond to the source code and helps to constraint certain semantic relations on the level of the structure
runtime {
	class Runtime {			// [in lrp source code] these are contents of LRPInterpreter, except current time
		timeNow: int
		runningMachines: RuntimeMachine*		// multiple concurrent (root) machines
		cache: CachedAction*					//ordered sequence
		root: Machine*                // those machines that a spawned from the program
		global: Variable*
		
		invariants {
			timeNow > 0
				
			// Root running machines	
			root = runningMachines.rmachine
			
			// The index of an action in the cache is unique
			forall ca1: cache, ca2: cache | ca1.index = ca2.index => ca1.caction = ca2.caction
				
			// if there are spawn actions in the cache then the corresponding (nested) machines have been started
		}		
	}

	class RuntimeMachine {	// [vs lrp source code] extension of the Machine class
		rmachine: Machine	
		currentState: RuntimeState
		triggeredTransition: Transition*
		changedValues: Variable*		
		
		invariants {
			// structurally consistent with the static part
			currentState.rstate in rmachine.states
			forall t: triggeredTransition | t in rmachine.transitions
			forall v: changedValues | v in (rmachine.variables ++ Runtime.global)
			
			// one or no triggered transition [0..1]
			one triggeredTransition || no triggeredTransition		
			
			// triggered transition leads to the current state
			one triggeredTransition => (forall t : triggeredTransition | t.to = currentState.rstate)
			 
			// if the machine has been just started, then it should be in its initial state
			(exists a: Runtime.cache.caction, sp: SpawnAction | 			// checking subtype
				sp.spaction = a && sp.spmachine = rmachine) => (currentState.rstate = rmachine.initState)
			
			// semantics of timeout transitions
			forall t: rmachine.transitions, tt: TimeoutTransition | 		// checking subtype
				(tt.ttrans = t && t.from = currentState.rstate) => 
				(Runtime.timeNow <= (tt.maxtime) + (currentState.startTime))
				
				
			// semantics of a transition triggered by an event (including a wildcard transition)
			forall t: NormalTransition |			// subtype check
				t.ntrans in triggeredTransition => t.onevent.action in Runtime.cache.caction
			forall t: WildCardTransition |      // subtype check
        t.wtrans in triggeredTransition => t.wonevent.action in Runtime.cache.caction
			
			// semantics of an epsilon transition: if there an epsilon transition from the current state, then we cannot stay in this state
			// (i.e. we have just changed the state)
			(exists t: EpsilonTransition | 								// subtype check
				currentState.rstate = t.etrans.from) => one triggeredTransition
			
			// if no transition was triggered then the state runing action was executed
			no triggeredTransition => currentState.rstate.running in Runtime.cache.caction 
									//(currentState.rstate = rmachine.initState && currentState.rstate.onentry in Runtime.cache.caction))
			
			// if a transition was triggered then an exit and an entry action were executed
			one triggeredTransition => ((forall t: triggeredTransition | t.from.onexit in Runtime.cache.caction) 
										                && (currentState.rstate.onentry in Runtime.cache.caction)) 
			
			// a variable can be changed by executing an ection
			//forall v: changedValues | (forall a: Action | v in a.scope => a in Runtime.cache.caction) <-- this one interacts with the distance definition (what is more important: cache or changed values?)
			forall v: changedValues | (exists a: Runtime.cache.caction | v in a.scope)											
		}
	}
	
	class RuntimeState {	// [vs lrp source code] extension of the State class
		rstate: State		
		startTime: int		
		runningNestedMachines: RuntimeMachine*		// nested machines
		
		invariants {
			// timer is started
			startTime >= 0 && startTime <= Runtime.timeNow
			
			//Structural consistency with the static part
			runningNestedMachines.rmachine = rstate.nested
		}
	}
	
	class CachedAction {
		caction: Action
		index: int
		invariant: index > 0
	}

}

migration {
	// time rule
	new[Runtime.timeNow] >= old[Runtime.timeNow] && new[Runtime.timeNow] <= old[Runtime.timeNow] + 1
	
	// root machines are the same
	new[Runtime.root] = old[Runtime.root]
	
	// if a current state has been removed 
	forall m1: new[RuntimeMachine], m2: old[RuntimeMachine] | 
	  (m1.rmachine = old[m2.rmachine] && 
	   not (old[m2.currentState.rstate] in m1.rmachine.states)) => 
	     m1.currentState.rstate = m1.rmachine.initState
	
	// if certain variables have changed we need to update (reexecute) actions that depend on them (or at least propose to do so) 
	forall m1: new[RuntimeMachine], m2: old[RuntimeMachine] | 
	  m1.rmachine = old[m2.rmachine] =>
	 (forall v: ((m1.changedValues -- old[m2.changedValues]) ++ (old[m2.changedValues] -- m1.changedValues)) |
	   (exists a: Action | v in a.scope => a in new[Runtime.cache.caction]))

	// if the current state is different from the previous one then we need to execute all necessary actions (exit, entry, stop/start nested machines)
	forall m1: new[RuntimeMachine], m2: old[RuntimeMachine] | 
	   (m1.rmachine = old[m2.rmachine] && 
	    m1.currentState.rstate != old[m2.currentState.rstate]) =>
	   ( (m1.currentState.rstate.onentry in new[Runtime.cache.caction]) && 
	     (old[m2.currentState.rstate.onexit] in new[Runtime.cache.caction]) )
	
	// TODO: This is the style that we want eventually: (Nextep design note)
	//forall m: RuntimeMachine | new[m.currentState.rstate] != old[m.currentState.rstate] => 
  //   ((new[m.currentState.rstate.onentry] in new[Runtime.cache.caction]) && 
  //    (old[m.currentState.rstate.onexit] in new[Runtime.cache.caction]))
	
	// Ensure structural consistency for the new run-time state
	forall rm1: new[RuntimeMachine], rm2: new[RuntimeMachine] |
	   rm1.rmachine = rm2.rmachine => rm1 = rm2 
	   
	forall rs1: new[RuntimeState], rs2: new[RuntimeState] |
	   rs1.rstate = rs2.rstate => rs1 = rs2
	
}

distance {
  (new[Runtime_runningMachines] -- old[Runtime_runningMachines]) ++ (old[Runtime_runningMachines] -- new[Runtime_runningMachines]): 0
  (new[Runtime_global] -- old[Runtime_global]) ++ (old[Runtime_global] -- new[Runtime_global]): 0
  (new[RuntimeMachine_rmachine] -- old[RuntimeMachine_rmachine]) ++ (old[RuntimeMachine_rmachine] -- new[RuntimeMachine_rmachine]): 0
  
  // THIS EXPRESSION DOES NOT WORK:
  (new[RuntimeMachine_currentState_rstate] -- old[RuntimeMachine_currentState_rstate]) ++ 
    (old[RuntimeMachine_currentState_rstate] -- new[RuntimeMachine_currentState_rstate]): 0
  //(new[RuntimeMachine_currentState] -- old[RuntimeMachine_currentState]) ++ (old[RuntimeMachine_currentState] -- new[RuntimeMachine_currentState]): 0
  //(new[RuntimeState_rstate] -- old[RuntimeState_rstate]) ++ (old[RuntimeState_rstate] -- new[RuntimeState_rstate]): 0
  
  (new[RuntimeMachine_triggeredTransition] -- old[RuntimeMachine_triggeredTransition]) ++ (old[RuntimeMachine_triggeredTransition] -- new[RuntimeMachine_triggeredTransition]): 0  
  (new[RuntimeState_startTime] -- old[RuntimeState_startTime]) ++ (old[RuntimeState_startTime] -- new[RuntimeState_startTime]): 0
  (new[RuntimeState_runningNestedMachines] -- old[RuntimeState_runningNestedMachines]) ++ (old[RuntimeState_runningNestedMachines] -- new[RuntimeState_runningNestedMachines]): 0  
  
  (new[Runtime_cache] -- old[Runtime_cache]) ++ (old[Runtime_cache] -- new[Runtime_cache]): 1
  (new[RuntimeMachine_changedValues] -- old[RuntimeMachine_changedValues]) ++ (old[RuntimeMachine_changedValues] -- new[RuntimeMachine_changedValues]): 1
  (new[CachedAction_caction] -- old[CachedAction_caction]) ++ (old[CachedAction_caction] -- new[CachedAction_caction]): 1
  (new[CachedAction_index] -- old[CachedAction_index]) ++ (old[CachedAction_index] -- new[CachedAction_index]): 1

}
