static {
	class Machine {
		states: State*
		initState: State
		variables: Variable*
		events: Event*				
		transitions: Transition*
	}
	
	class State {
		nested: Machine*
		onentry: Action*		// another way to model inheritance: have separate relations for subtypes
		running: Action*
		onexit: Action*		
	}

	class Variable {}
	
	class Action {
		scope : Variable*
	}
	
	class Event {			// event is an action that returns boolean
		action: Action
	}
	
	class SpawnAction {		// some actions are meant to start execution of a nested machine
		spaction: Action
		spmachine: Machine
	}
	
	class Transition {
		from : State
		to : State
	}
	
	class NormalTransition {
		ntrans: Transition	// this is how we model a subset/subclass of Transition
		onevent: Event
	}
	
	class EpsilonTransition {
		etrans: Transition	// subclass of Transition
	}
	
	class TimeoutTransition {
		ttrans: Transition 	// subclass of Transition
		maxtime: int		// how to model that the maxtime can be a reference to a variable??????
	} 
	
	class WildCardTransition {
		wtrans: Transition 	// subclass of Transition (or subclass of NormalTransition)
		wfrom : State*		// overriding of a field
		wonevent: Event
	}
	
	
}


//Note: the runtime structure does not correspond to the source code and helps to constraint certain semantic relations on the level of the structure
runtime {
	class Runtime {			// [in lrp source code] these are contents of LRPInterpreter, except current time
		timeNow: int
		runningMachines: RuntimeMachine*		// multiple concurrent (root) machines
		cache: CachedAction*					//ordered sequence
		
		invariants {
			timeNow > 0
				
			// if there are spawn actions in the cache then the corresponding (nested) machines have been started (CLOSURE?!)
		}		
	}

	class RuntimeMachine {	// [vs lrp source code] extension of the Machine class
		rmachine: Machine	
		currentState: RuntimeState
		triggeredTransition: Transition*
		changedValues: Variable*		
		
		invariants {
			// structurally consistent with the static part
			currentState.rstate in rmachine.states
			forall t: triggeredTransition | t in rmachine.transitions
			forall v: changedValues | v in rmachine.variables
			
			// one or no triggered transition [0..1]
			one triggeredTransition || no triggeredTransition		
			
			// triggered transition leads to the current state
			forall t : triggeredTransition | t.to = currentState.rstate
			 
			// if the machine has been just started, then it should be in its initial state
			(exists a: Runtime.cache.caction, sp: SpawnAction | 			// checking subtype
				sp.spaction = a && sp.spmachine = rmachine) => (currentState.rstate = rmachine.initState)
			
			// semantics of timeout transitions
			forall t: rmachine.transitions, tt: TimeoutTransition | 		// checking subtype
				(tt.ttrans = t && t.from = currentState.rstate) => 
				(Runtime.timeNow <= (tt.maxtime) + (currentState.startTime))
				
				
			// semantics of a transition triggered by an event (including a wildcard transition)
			forall t: NormalTransition |			// subtype check
				t.ntrans in triggeredTransition => t.onevent.action in Runtime.cache.caction
			forall t: WildCardTransition |      // subtype check
        t.wtrans in triggeredTransition => t.wonevent.action in Runtime.cache.caction
			
			// semantics of an epsilon transition: if there an epsilon transition from the current state, then we cannot stay in this state
			// (i.e. we have just changed the state)
			(exists t: EpsilonTransition | 								// subtype check
				currentState.rstate = t.etrans.from) => one triggeredTransition
			
			// if no transition was triggered then the state runing action was executed
			no triggeredTransition <=> (currentState.rstate.running in Runtime.cache.caction ||
									(currentState.rstate = rmachine.initState && currentState.rstate.onentry in Runtime.cache.caction))
			
			// if a transition was triggered then an exit and an entry action were executed
			one triggeredTransition <=> (exists t: triggeredTransition | t.from.onexit in Runtime.cache.caction) 
										&& (currentState.rstate.onentry in Runtime.cache.caction) 
			
			// a variable can be changed by executing an ection
			forall v: changedValues | (exists a: Runtime.cache.caction | v in a.scope)								
		}
	}
	
	class RuntimeState {	// [vs lrp source code] extension of the State class
		rstate: State		
		startTime: int		
		runningNestedMachines: RuntimeMachine*		// nested machines
		
		invariants {
			// timer is started
			startTime > 0 && startTime <= Runtime.timeNow
			
			// structurally consistent with the static part
			forall m: runningNestedMachines | m.rmachine in rstate.nested
			
			
		}
	}
	
	class CachedAction {
		caction: Action
		index: int
		invariant: index > 0
	}

}

migration {
	// time rule
	new[Runtime.timeNow] >= old[Runtime.timeNow] && new[Runtime.timeNow] <= old[Runtime.timeNow] + 1
	
	// if a current state has been removed (--> CLOSURE!)
	// not old[Runtime.current] in new[Runtime.machine.states] => (new[Runtime.current] = new[Runtime.machine.initial])
	
	// if certain variables have changed we need to update (reexecute) actions that depend on them (or at least propose to do so) (--> CLOSURE!)
	forall v: (new[Runtime.runningMachines.changedValues] -- old[Runtime.runningMachines.changedValues]) 
	       ++ (old[Runtime.runningMachines.changedValues] -- new[Runtime.runningMachines.changedValues]) |
		(exists a: Action | v in a.scope) => a in new[Runtime.cache.caction]

	// if the current state is different from the previous one then we need to execute all necessary actions (exit, entry, stop/start nested machines)
	// (--> CLOSURE!)
}
